---
/** If your site uses a layout, keep this import; otherwise remove Layout and its wrapper below. */
import Layout from '../../layouts/Page.astro';

const BASE = import.meta.env.BASE_URL || "/";
const page = { title: "Viewer" };
---

<Layout {page}>
  <head><meta name="robots" content="noindex" /></head>

  <section class="wrap">
    <header class="bar">
      <div class="ttl">
        <h1 class="h">Structure Viewer</h1>
        <p class="sub" id="viewer-title">Structure</p>
      </div>
      <div class="actions">
        <a id="download-cif" class="btn" href="#" download hidden>Download CIF</a>
        <a class="btn" href={`${BASE}Crystallography/`} aria-label="Back to Crystallography">Back</a>
      </div>
    </header>

    <div id="viewer" class="viewer" aria-label="3D structure viewer"></div>
    <p id="error" class="error" hidden></p>
  </section>

  <script is:inline>
    (function () {
      const BASE = {JSON.stringify(BASE)};
      const $title = document.getElementById('viewer-title');
      const $viewer = document.getElementById('viewer');
      const $error = document.getElementById('error');
      const $dl = document.getElementById('download-cif');

      function toBasePath(p) {
        if (!p) return "";
        if (p.startsWith("http")) return p;
        // If already starts with BASE, keep as-is
        if (p.startsWith(BASE)) return p;
        // If it starts with "/", prefix BASE; else treat as relative under BASE
        const clean = p.replace(/^\.?\//, "");
        return BASE + clean;
      }

      const url = new URL(location.href);
      const cifParam = url.searchParams.get("cif");
      const titleParam = url.searchParams.get("title") || "Structure";
      $title.textContent = titleParam;

      const cifUrl = cifParam ? toBasePath(cifParam) : "";

      if (!cifUrl) {
        $error.hidden = false;
        $error.textContent = 'Missing CIF. Open with ?cif=/assets/cifs/NAME.cif&title=My+Sample';
        return;
      }

      // Show download button
      $dl.hidden = false;
      $dl.href = cifUrl;

      function init(text) {
        const viewer = $3Dmol.createViewer($viewer, { backgroundColor: 'white' });
        viewer.addModel(text, 'cif');
        viewer.setStyle({}, { stick: { radius: 0.15 }, sphere: { scale: 0.23 } });
        try { viewer.addUnitCell(); } catch (e) {}
        viewer.zoomTo();
        viewer.render();
        window.addEventListener('resize', () => viewer.resize());
      }

      function loadViewer() {
        fetch(cifUrl).then(r => {
          if (!r.ok) throw new Error('Failed to fetch CIF (' + r.status + ')');
          return r.text();
        }).then(init).catch(err => {
          $error.hidden = false;
          $error.textContent = 'Could not load CIF: ' + err.message;
        });
      }

      // Lazy-load 3Dmol then render
      const s = document.createElement('script');
      s.src = 'https://unpkg.com/3dmol/build/3Dmol-min.js';
      s.onload = loadViewer;
      s.onerror = () => {
        $error.hidden = false;
        $error.textContent = 'Could not load 3Dmol.js.';
      };
      document.head.appendChild(s);
    })();
  </script>

  <style>
    .wrap { display: grid; gap: 1rem; }
    .bar { display:flex; justify-content:space-between; align-items:center; gap:1rem; flex-wrap:wrap; }
    .h { margin:0; font-size: clamp(1.1rem, 2.2vw, 1.6rem); }
    .sub { margin:0; opacity:.7; }
    .actions { display:flex; gap:.5rem; }
    .btn { padding:.45rem .7rem; border:1px solid var(--accents-2, #ddd); border-radius:.5rem; text-decoration:none; }
    .viewer {
      width: min(1200px, 100%);
      height: min(75vh, 80rem);
      margin: 0 auto;
      border: 1px solid var(--accents-2, #e5e7eb);
      border-radius: .75rem;
    }
    .error { color:#b00020; }
  </style>
</Layout>